buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "6.0.+", changing: true
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "org.spongepowered.mixin"

mixin {
    add sourceSets.main, "${project.modId}.refmap.json"
}

version = "${project.minecraft}-${project.modVersion}"
group = "com.teamabnormals"
archivesBaseName = project.modId

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft {
    mappings channel: "official", version: "${project.minecraft}"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "blueprint.indev", "true"
            arg "-mixin.config=" + project.modId + ".mixins.json"
            arg "-mixin.config=" + "blueprint_test.mixins.json"
            mods {
                blueprint {
                    source sourceSets.main
                }
                blueprint_test {
                    source sourceSets.test
                }
            }
        }
        server {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "blueprint.indev", "true"
            arg "-mixin.config=" + project.modId + ".mixins.json"
            arg "-mixin.config=" + "blueprint_test.mixins.json"
            mods {
                blueprint {
                    source sourceSets.main
                }
                blueprint_test {
                    source sourceSets.test
                }
            }
        }
        def blueprintDataArgs = [
                "--mod", project.modId,
                "--all",
                "--output", file("src/generated/resources/"),
                "--existing", file("src/main/resources")
        ]
        data {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            property "blueprint.indev", "true"
            args blueprintDataArgs
            mods {
                blueprint {
                    source sourceSets.main
                }
            }
        }
        testData {
            parent runs.data

            mods {
                blueprint_test {
                    source sourceSets.test
                }
            }

            afterEvaluate {
                //Weird trick, but forge test mods do it too
                args.removeAll {
                    blueprintDataArgs.contains(it instanceof File ? (it as File).absolutePath : it.toString())
                }
                args "--mod", "blueprint_test", "--all", "--output", file("src/generated_test/resources/"), "--existing", file("src/test/resources")
            }
        }
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

sourceSets.test.resources {
    srcDir "src/generated_test/resources"
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft}-${project.forge}"

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : "Team Abnormals",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : project.modVersion,
                "Implementation-Vendor"   : "Team Abnormals",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : project.modId + ".mixins.json"
        ])
    }
    finalizedBy "reobfJar"
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        if (project.hasProperty("jacksonMavenUser") && project.hasProperty("jacksonMavenPass")) {
            maven {
                url "https://maven.jaackson.me"
                credentials {
                    username = project.properties.jacksonMavenUser
                    password = project.properties.jacksonMavenPass
                }
            }
        }
    }
}
